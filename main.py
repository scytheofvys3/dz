print ("Hello World") # =str-string строка

print (type(5)) # тип числа =int-integer - целое число
print (type(2.1)) # тип числа =float число с плавающей запятой
print (type("Stro4ka")) # тип данных =str-string строка

# concatenate - связывает, сцепляет, соединяет оператор +, но одинаковые объекты
# запятая в командах "," говорит о том, что элемент закончился и сейчас будет другой

print (78 % 33) # сколько в число 78 помещается число 33 получим остаток от этого/остаток от деления
print (78/33) # деление с плавающей запятой =float
print (78//33) # деление с ответом без запятой =int-integer
print (7 % 7) # сколько в число 7 поместится число 7, если поместилось, то это 0

print (5 ** 3) #степень

#boolean - тип данных "примитивно" да-нет, истина-ложь
print (type(True),type(False))
print (5 == 5, 5 > 2, 3 < 1, 5 != 5, 5 != 4) # == - они равны?, != - они не равны?

# команда and= и, or= или

# and= и - если все условия с двух сторон равны, то все выражения считаются истинными
# and= и - чтобы получить «True», должны быть истинны оба выражения
print (5 == 5 and 5 != 5)
print (10 == 10 and 6 > 3)

# or= или - выражение ложно, если оно с двух сторон ложно, если одно из них истинное, то все выражения истинно
# or= или, чтобы получить «True» достаточно, чтобы истинным было хотя бы одно.
print (5 == 5 or 5 != 5)
print (5 > 6 or 6 > 7 )

# Перевод данных в другой тип. Текстовую пятерку перевел в число и также наоборот в строку. Код расшифровывается справа налево.
print (type(int("5")))
print (type(str(5)))

## DZ 1
# 1st program
print (9 ** 0.5 * 5)
# 2nd program
print (9.99 > 99.98 or 1000 != 1000.1)
# 3rd program
print (2 * 2 + 2 == 2 * (2 + 2))
# 4th program
print (int(float ('123.456')* 10 % 10))

# Динамическая типизация - это смена типа данных в переменной
# Оператор = присваивает переменной (прим. Name) тип данных, то есть переменная name ссылается на значение Urban
# Получается, что правый объект присваивает себе некую переменную(левое значение), которую в дальнейшем можно использовать
name1 = 'Urban'
print (name1, type(name1))
name1 = 5
print (name1, type(name1))
name1 = 2.2
print (name1, type(name1))

name01 = 5
name01 = 6
print (name01 + name01) # Запомнит он последний объект привязанный к одной переменной

## DZ 2
name = 'Ilya'
print (name, type(name))
age = 24
print (age,type(age))
age = age + 24
print (age,type(age))
is_student = True
print (is_student, type(is_student))

# Переменная - хранит в себе информацию к которой мы можем обращаться в дальнейшей работе
# Важно, чтобы переменная носила осмысленное название и была эксклюзивной (не была названа другой командой)
# Snake case - название переменной пишется через нижнее подчеркивание (для читаемости и быстрого понимания) - data_of_brith
# Camel case - название переменной пишется с заглавной буквы (каждое слово) - dataOfBrith
## Мне больше понравился стиль snake case, в дальнейшем иногда можно путать ноль и букву О

a, b, c = 1, 2, 3 # Множественное присваивание - присвоить сразу несколько значений в одной строке
print (c + b * a)

a =  b = c = 67 # Каскадное присваивание - то есть a = b = c, а все перечисленные переменные содержат объект int-integer 67
print (a + b + c)

d = list ('Begin') # Преобразование строки в список - (пока не знаю для чего)
print (d)

list1 = [5, 3, 1] # Множественное присваивание со списками (Пока не очень понимаю для чего это)
a, b, c = list1

# DZ 3
completed_dz = 12 # Выполнено заданий
hours_spent = 1.5 # Время на одно задание
name_cource = 'Python' # Название курса
time_one_job = int (completed_dz / hours_spent) # Время на выполнение одного задания

print ("Курс:", name_cource,",","Затраченное время на одно задание:", hours_spent,",","Среднее время на выполнения одного задания:", time_one_job, "ч.")

name = "IlyaNefedov"
print ('Hello, ' * 2 + name) # Дублирование строки через оператор *

# Индексация строки у каждой строки есть свой порядковый индекс начинается он с нуля
# Так же можно выводить и последнюю букву начиная с -1 (последняя буква), -2 (предпоследняя буква) и так далее.
print (name [0]) # нулевой индекс принимается как первая буква и так далее
print (name [-1]) # индекс со знаком минус выводит буквы с конца
print (name [0:5]) # срез строки последний элемент не выводится, то есть получается 0 - 4 (в данном случае)
print (name [0:8:2]) # 0 начало, 8 конец, 2 шаг # выведет нам с 0 индекса по 8 (не включительно) с шагом 2
# Так же мы можем пропускать начальное и последние значение
print (name [:11]) # мы пропустили первое значение, но указали конечное, он сам понял, что не указанное это начало
print (name [:5]) # мы пропустили первое значение, но указали конечное, он сам понял, что не указанное это начало
print (name [0:]) # мы указали первое, но не указали конечное, поэтому для него конечное это конец строки
print (name [4:]) # мы указали первое, но не указали конечное, поэтому для него конечное это конец строки
print (name [::-1]) # срез с конца строки с шагом 1, мы не указали начальное и конечно, поэтому эти значения равны началу и концу строки
print (name [::1]) # срез с начала строки с шагом 1, мы не указали начальное и конечно, поэтому эти значения равны началу и концу строки
print (name [-1:-10:-2]) # срез с конца строки, но в начале, до 10 индекса с шагом два, обратный порядок

# DZ 4
example = 'AnString'
print (example [0]) # Первый символ в строке
print (example [-1]) # Последний символ в строке с использованием обратного индекса
print (example [3:]) # Вторая половина строки с нечетным кол-во букв
print (example [::-1]) # Слово наоборот
print (example [::2]) # Каждый второй индекс в строке с использованием шага

##name = input('Введите свое имя: ') # команда input говорит о том, что пользователю нужно ввести данные с клавиатуры
##current_data = 2024 # год на данный момент
##data_of_brith = int (input ('Ваш год рождения: ')) #год рождения юзера, команда int, которая преобразует ВВОД в число
### тк как изначально ВВОДИМЫЕ ДАННЫЕ имеют класс str-string строка
##age = current_data - data_of_brith # год на данный момент минус год рождения юзера
##print ('Добро пожаловать,',name) # выводи приветствия и имя юзера
##print ('В этом году вам исполнилось',age, 'года/лет' ) # выводит строку сколько лет исполнилось юзеру и переменную age
#^^^^ обычная программа, которая считает возраст юзера (без месяца и дня)


print ('я строка в нижнем регистре'.replace('строка','человек'))
#заменили слово строка на человек
print ('я строка в нижнем регистре'.replace('строка','Человек').replace('я','В').replace(' ','-'))
#замена нескольких слов в строке
print ('я строка в нижнем регистре'.replace(' ','.')) #заменили символ ПРОБЕЛ ( ) на символ ТОЧКУ
# команда .upper() - переводит текст в Верхний регистр
# команда .lower() - переводит текст в Нижний регистр
# команда .replace('что заменить','на что заменить') - заменяет выбранное слово на другое

#DZ 5
##my_string = input ('Введите произвольный текст:') #ввод текста в формате данных str
##print ('Кол-во символов в строке:',len(my_string)) #команда len подсчитывает кол-во элементов
##print (my_string .upper()) # изменяем текст на верхний регистр
##print (my_string .lower()) # изменяем текст на нижний регистр
##print (my_string .replace(' ', '')) # удалям ПРОБЕЛЫ на ничего
##print (my_string [0:1]) # вывод первого символа в строка
##print (my_string [-1]) # вывод последнего символа в строке
#Здесь должен быть текст посвященный университету урбан

food = ['apple', 'coco', 'banana', 'cherry', 2] # в квадратных скобках хранятся элементы списка
# то есть у каждого элемента есть порядковый номер он же - индекс
print (food[3]) # нумерация начинается с нуля, как и любой индекс
food [0] = 'beef'# замена нулевого индекса(то есть первого слова) на другое слово
food [2] = 2024 # замена нулевого индекса(то есть первого слова) на другой элемент
# списки изменяемые, то есть их можно менять
print (food)

food.append(True) # добавили элемент True
# в списках могут храниться любые типы данных
# добавить в список можно любой тип данных
food.append('pear') #добавили элемент
# команда .appent(что добавить) добавляет элемент в конец списка, можно добавить только один элемент
#food.extend(['True',2,'false'])
food.extend('True')
# команда .extend(что добавить) если добавлять одно слово, то оно разбивается по символам/буквам (каждый отдельно)
food.extend(['True', 2, 'Foll'])
# если добавлять в квадратных скобках(список), то можно сразу несколько разных типов данных
# причина почему она не разбивается на отдельные символы в том, что мы в квадратных скобках уже добавляем последовательность
food.remove('cherry')# удаление элемента из списка, можно удалить только один элемент

print ("beef" in food) # командой in(в) можно проверять если элемент в списке
print ('beeed' in food)
# данную команду можно расшифровывать как - если ли "слово (in) в списке?"
print ('coco' not in food) # командой not in(не в) можно проверить отсутствие элемента в списке
print ('peaar' not in food)
# данную команду можно расшифровывать как - "слово не в списке"?
print (food [-1::-1]) # так же мы можем проводить индексация со списком
print (food)

# tuple - (тайпл) - кортеж - неизменяемый список, может содержать разные типы данных, так же как и список
# тот же самый список, но не изменяемый. нельзя изменить, удалить, добавить
# так же можно хранить в кортеже список
tuple = (1,2,3,4) + (9,7,8)
tuple1 = ('string', 'apple', 1, 5, True) # разные типы данных
tuple2 = ('beef', 'classic', ['dream', 'mono', 1, 3]) # так же можно хранить в кортеже список
print (tuple)
print (tuple1)
print (tuple2)
tuple2 [2][0] = 'bag' # в кортеже можно изменять ТОЛЬКО, что уже изменяется - то есть список в квадратных скобках
print (tuple2)
tuple3 = ("dragon",) * 3 # ВАЖНО, если КОРТЕЖ содержит один элемент, то он должен заканчиваться запятой, иначе мы не получим кортеж
# так же можно умножать
print (tuple3)
print (type(tuple3))

# DZ 6
immutable_var = ('string', 'm-track', 'gaming', 1, 2, 3, True, False, ['apple', 'cherry', 'coco'])
print (immutable_var)
immutable_var [8][0] = 'alesis' # кортеж не изменяется, если в нем нет изменяемых данных (к таким относятся типы данных как список)
print (immutable_var)

mutable_list = ['glass', 'long', 'bridge', 1, 5, 10, True]
print (mutable_list)
mutable_list .append('self-mish') # добавили элемент
mutable_list .extend('delete') # добавили элемент по разбиванию на символы
mutable_list .extend(['insert' ,'end']) # если добавлять два элемента команда идентичная .append
print (mutable_list)
mutable_list .remove('bridge') # удалили элемент
print (mutable_list)
